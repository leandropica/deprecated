<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2" 
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security-4.1.xsd
		http://www.springframework.org/schema/security/oauth2 
		http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.1.xsd">

	<!-- OAuth2. Authorization Server definition -->
	<http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="clientAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/oauth/token" access="permitAll" />
		<anonymous enabled="false" />
		<csrf disabled="true"/>
		<http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<!-- include this only if you need to authenticate clients via request parameters -->
		<custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>
 	
 	<!-- OAuth2. Protected resources definition -->
	<http pattern="/test/*" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager" xmlns="http://www.springframework.org/schema/security" use-expressions="true">
		<anonymous enabled="false" />
		<csrf disabled="true"/>
		<intercept-url pattern="/test/*" access="hasRole('USER')" /> 
 		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>
 
 	<!-- OAuth2. Authorized Clients definition (Hard-coded) -->
	<oauth:client-details-service id="clientDetails">
		<oauth:client client-id="the_client" secret="secret"
						authorized-grant-types="authorization_code,client_credentials"
	            		authorities="ROLE_USER" />
	
		<oauth:client client-id="my-trusted-client-with-secret" secret="somesecret" 
						authorized-grant-types="password,authorization_code,refresh_token,implicit"
						authorities="ROLE_USER" 
						scope="read,write,trust" 
						access-token-validity="120"
						refresh-token-validity="600" />
						
	</oauth:client-details-service>
 	
 	<!-- OAuth2. Authentication Manager definition. User validation -->
 	<authentication-manager id="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="clientDetailsUserService" />
	</authentication-manager>

	<authentication-manager id="authenticationManager" alias="authenticationManager" xmlns="http://www.springframework.org/schema/security">
		<authentication-provider ref="customAuthenticationProvider" /> <!-- Custom validator! -->
	</authentication-manager>
 	
 	<bean id="customAuthenticationProvider" class="com.pica.demo.security.oauth2.config.CustomAuthenticationProvider"/>
 	
 	<!-- OAuth2. Configuration beans -->
 	<bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
	</bean>
	
 	<bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="test" />
	</bean>

	<bean id="clientAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="test/client" />
		<property name="typeName" value="Basic" />
	</bean>

	<bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>
	
	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased" 
        	xmlns="http://www.springframework.org/schema/beans">
        <constructor-arg>
            <list>
            	<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
                <bean class="org.springframework.security.access.vote.RoleVoter" />
                <bean class="org.springframework.security.web.access.expression.WebExpressionVoter" />
            </list>
        </constructor-arg>
	</bean>

	<!-- Used for the persistenceof tokens (currently an in memory implementation) -->
	<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore" />

	<!-- Used to create token and and every thing about them except for their persistence that is reposibility of TokenStore (Given here is a 			default implementation) -->
	<bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
		<property name="clientDetailsService" ref="clientDetails" />
	</bean>

	<bean id="userApprovalHandler" class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
	    <property name="tokenStore" ref="tokenStore" />
	    <property name="requestFactory" ref="oAuth2RequestFactory" />
	</bean>
	
	<!-- A user approval handler that remembers approval decisions by consulting existing tokens -->
	<bean id="oAuth2RequestFactory" class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
    	<constructor-arg ref="clientDetails" />
	</bean>

	<!-- authorization-server aka AuthorizationServerTokenServices is an interface that defines everything necessary for token management -->
	<oauth:authorization-server client-details-service-ref="clientDetails" token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler">
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />
	</oauth:authorization-server>

	<oauth:resource-server id="resourceServerFilter" resource-id="test" token-services-ref="tokenServices" />

	<sec:global-method-security pre-post-annotations="enabled" proxy-target-class="true">
		<!--you could also wire in the expression handler up at the layer of the http filters. See https://jira.springsource.org/browse/SEC-1452 -->
		<sec:expression-handler ref="oauthExpressionHandler" />
	</sec:global-method-security>

	<oauth:expression-handler id="oauthExpressionHandler" />

	<oauth:web-expression-handler id="oauthWebExpressionHandler" />
	
</beans>